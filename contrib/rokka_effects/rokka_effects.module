<?php

/**
 * Implements hook_image_effect_info().
 */
function rokka_effects_image_effect_info() {
  return array(
    'rokka_crop' => array(
      'label' => t('Rokka: Crop with background (*Rokka.io Only*)'),
      'help' => t('Cropping will remove portions of an image to make it the specified dimensions. Overcropping will increase the image size with a background.'),
      'effect callback' => 'image_crop_effect',
      'dimensions callback' => 'image_resize_dimensions',
      'form callback' => 'rokka_effects_crop_form',
      'summary theme' => 'rokka_effects_crop_summary',
    ),
    'rokka_blur' => array(
      'label' => t('Rokka: Blur (*Rokka.io Only*)'),
      'help' => t('Apply a blur filter to the image'),
      'effect callback' => 'rokka_effects_none',
      'dimensions passthrough' => true,
      'form callback' => 'rokka_effects_blur_form',
      'summary theme' => 'rokka_effects_blur_summary',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function rokka_effects_theme() {
  return array(
    'rokka_effects_crop_summary' => array(
      'variables' => array('data' => NULL),
    ),
    'rokka_effects_blur_summary' => array(
      'variables' => array('data' => NULL),
    ),
  );
}

/**
 * Image effect callback; do not alter the image.
 *
 * @param $image
 *      An image object returned by image_load().
 * @param $data
*    Ignored, as the computation will be done by Rokka.io
 *
 * @return bool
 *   TRUE always
 */
function rokka_effects_none(&$image, $data) {
  return true;
}


/**
 * Form structure for the image blur form.
 *
 * Note that this is not a complete form, it only contains the portion of the
 * form for configuring the blur options. Therefore it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param $data
 *   The current configuration for this blur effect.
 *
 * @return array
 */
function rokka_effects_blur_form($data) {

  $form['radius'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['radius']) ? $data['radius'] : 5,
    '#title' => t('Radius Value'),
    '#description' => t('Blur Radius value, between 0 and 25, default: 5.'),
    '#required' => TRUE,
    '#maxlength' => 4,
    '#element_validate' => array('rokka_effects_integer_validate'),
    '#max_int_value' => 25,
  );

  $form['sigma'] = array(
    '#type' => 'textfield',
    '#title' => t('Sigma value'),
    '#description' => t('Blur Sigma value, between 0 and 25, default: 5.'),
    '#default_value' => isset($data['sigma']) ? $data['sigma'] : 5,
    '#element_validate' => array('rokka_effects_integer_validate'),
    '#required' => TRUE,
    '#maxlength' => 4,
    '#max_int_value' => 25,
  );

  return $form;
}

/**
 * Returns HTML for a summary of an Rokka Blur effect.
 *
 * @param $variables
 *   An associative array containing:
 *   - data: The current configuration for this resize effect.
 *
 * @return string
 */
function theme_rokka_effects_blur_summary($variables) {
  $data = $variables['data'];

  return 'Radius: '.check_plain($data['radius']) . ' Sigma: ' . check_plain($data['sigma']);
}


/**
 * Form structure for the Rokka Crop form.
 *
 * Note that this is not a complete form, it only contains the portion of the
 * form for configuring the crop options. Therefore it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param $data
 *   The current configuration for this crop effect.
 *
 * @return array
 */
function rokka_effects_crop_form($data) {
  $form = image_crop_form($data);

  $form['background_color'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['background_color']) ? $data['background_color'] : '#000000',
    '#title' => t('Background color'),
    '#description' => t('The background color to use for exposed areas of the image. Use web-style hex colors (#FFFFFF for white, #000000 for black)'),
    '#size' => 7,
    '#maxlength' => 7,
    '#element_validate' => array('image_effect_color_validate'),
  );

  $form['background_opacity'] = array(
    '#type' => 'textfield',
    '#title' => t('Background opacity'),
    '#description' => t(''),
    '#default_value' => isset($data['background_opacity']) ? $data['background_opacity'] : 100,
    '#size' => 3,
    '#element_validate' => array('rokka_effects_opacity_validate'),
  );

  return $form;
}

/**
 * Returns HTML for a summary of an Rokka Crop effect.
 *
 * @param $variables
 *   An associative array containing:
 *   - data: The current configuration for this resize effect.
 *
 * @return string
 */
function theme_rokka_effects_crop_summary($variables) {
  $data = $variables['data'];

  if ($data['width'] && $data['height']) {
    return check_plain($data['width']) . 'x' . check_plain($data['height']). ' (background: ' . check_plain($data['background_color'].')');
  }
  else {
    return ($data['width']) ? t('width @width', array('@width' => $data['width'])) : t('height @height', array('@height' => $data['height']));
  }
}

/**
 * Element validate handler to ensure an opacity value value.
 */
function rokka_effects_opacity_validate($element, &$form_state) {
  $value = $element['#value'];
  if ($value != '' && (!is_numeric($value) || intval($value) < 0)) {
    form_error($element, t('!name must be a positive integer.', array('!name' => $element['#title'])));
  }
}

/**
 * Element validate handler to ensure an integer value value.
 */
function rokka_effects_integer_validate($element, &$form_state) {
  $value = $element['#value'];
  $max_value = !empty($element['#max_int_value']) ? $element['#max_int_value'] : null;

  if ($value != '' && (!is_numeric($value) || intval($value) < 0)) {
      form_error($element, t('!name must be a positive integer.', array('!name' => $element['#title'])));
  }

  if ($max_value && (int) $value > (int) $max_value) {
    form_error($element, t('!name must be a positive integer, less or equal than !max-value.', array(
      '!name' => $element['#title'],
      '!max-value' => $max_value,
    )));
  }
}
